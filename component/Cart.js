class Cart extends HTMLElement {
    constructor() {
        super();
        this.attachShadow({ mode: "open" });
        this.cartItems = JSON.parse(localStorage.getItem("cart")) || [];//localStorage-–æ–æ—Å cart ”©–≥”©–≥–¥–ª–∏–π–≥ JSON —Ñ–æ—Ä–º–∞—Ç—Ç–∞–π —É–Ω—à–∏–∂, –º–∞—Å—Å–∏–≤ –±–æ–ª–≥–æ–Ω —Ö–∞–¥–≥–∞–ª–Ω–∞. –•—ç—Ä—ç–≤ ”©–≥”©–≥–¥”©–ª –±–∞–π—Ö–≥“Ø–π –±–æ–ª —Ö–æ–æ—Å–æ–Ω –º–∞—Å—Å–∏–≤ ([]) “Ø“Ø—Å–≥—ç–Ω—ç.
    }
//–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ö–æ–ª–±–æ–≥–¥–æ—Ö “Ø–µ–¥
    connectedCallback() {
        window.addEventListener("add-to-cart", (event) => { //"add-to-cart" —ç–≤–µ–Ω—Ç “Ø“Ø—Å—ç—Ö “Ø–µ–¥ —Å–∞–≥—Å–∞–Ω–¥ –Ω—ç–º—ç—Ö –ª–æ–≥–∏–∫ –∞–∂–∏–ª–ª–∞–Ω–∞.
            const product = event.detail.product; //–≠–≤–µ–Ω—Ç–∏–π–Ω –º—ç–¥—ç—ç–ª–ª—ç—ç—Å –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π ”©–≥”©–≥–¥–ª–∏–π–≥ –∞–≤–Ω–∞.
            const quantity = event.detail.quantity;

            const existing = this.cartItems.find((item) => item.id === product.id); //–°–∞–≥—Å–∞–Ω–¥ –∞–ª—å —Ö—ç–¥–∏–π–Ω –±–∞–π–≥–∞–∞ –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π–≥ ID-–∞–∞—Ä –Ω—å —Ö–∞–π–∂ –æ–ª–æ—Ö.

            if (existing) {
               existing.quantity += quantity; // Increment by the quantity
            } else {
                this.cartItems.push({ ...product, quantity });
            }

            localStorage.setItem("cart", JSON.stringify(this.cartItems));//–°–∞–≥—Å–Ω—ã —à–∏–Ω—ç—á–ª—ç–≥–¥—Å—ç–Ω ”©–≥”©–≥–¥–ª–∏–π–≥ localStorage-–¥ —Ö–∞–¥–≥–∞–ª–Ω–∞.
            this.render();
        });

        this.render();
    }
//–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π–≥ ID-–∞–∞—Ä –Ω—å —Å–∞–≥—Å–Ω–∞–∞—Å —É—Å—Ç–≥–∞–Ω–∞.
    removeItem(itemId) {
        this.cartItems = this.cartItems.filter(item => item.id !== itemId);
        localStorage.setItem("cart", JSON.stringify(this.cartItems));//–°–∞–≥—Å–Ω—ã —à–∏–Ω—ç—á–∏–ª—Å—ç–Ω ”©–≥”©–≥–¥–ª–∏–π–≥ localStorage-–¥ —Ö–∞–¥–≥–∞–ª–Ω–∞.
        this.render();
    }
//–°–∞–≥—Å—ã–≥ –±“Ø—Ä—ç–Ω —Ö–æ–æ—Å–ª–æ—Ö.
    clearCart() {
        this.cartItems = [];
        localStorage.removeItem("cart");
        this.render();
    }

    render() {
        const total = this.cartItems.reduce(
            (sum, item) => sum + item.price * item.quantity,
            0
        );

        this.shadowRoot.innerHTML = `
            <style>
                .cart { border: 1px solid #ddd; padding: 10px; }
                .cart-item { display: flex; justify-content: space-between; margin: 5px 0; }
                .delete { font-size: 15px; cursor: pointer; transition: color 0.3s; }
                .delete:hover { color: darkred; }
                .clear-cart { font-size: 16px; cursor: pointer; margin-top: 10px; padding: 5px 10px; background-color: red; color: white; border: none; border-radius: 5px; }
                .clear-cart:hover { background-color: darkred; }
            </style>
            <div class="cart">
                <h3>–ú–∏–Ω–∏–π –°–∞–≥—Å</h3>
                <p>–ù–∏–π—Ç: ${total}‚ÇÆ</p>
                <div>
                    ${this.cartItems
                        .map(
                            (item) => `
                        <div class="cart-item">
                            <span>${item.title} x ${item.quantity}</span>
                            <span>${item.price * item.quantity}‚ÇÆ</span>
                        </div>
                    `
                        )
                        .join("")}
                </div>
                <button class="clear-cart">–°–∞–≥—Å —Ö–æ–æ—Å–ª–æ—Ö üóëÔ∏è</button>
            </div>
        `;

        this.shadowRoot.querySelector(".clear-cart").addEventListener("click", () => {
            this.clearCart();
        });
    }
}

customElements.define("cart-component", Cart);
